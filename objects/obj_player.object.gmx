<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>lucario_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>idleRight = lucario_right;
idleUp = lucario_up;
idleLeft = lucario_left;
idleDown = lucario_down;
walkRight = lucario_walk_right;
walkUp = lucario_walk_up;
walkLeft = lucario_walk_left;
walkDown = lucario_walk_down;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement

/********************************************************************
THIS NEXT BLOCK OF CODE TAKES CARE OF THE PLAYERS DIRECTION AND SPEED 
********************************************************************/

// Set speed and direction when key pressed
if (g_keyDirectionIsPressed)
{
    
    speed = 1;
    if (g_keyDirection == 0)   
    {
        direction = 0;
    }
    if (g_keyDirection == 90)  
    {
        direction = 90;
    }
    if (g_keyDirection == 180)
    {
        direction = 180;
    }
    if (g_keyDirection == 270) 
    {
        direction = 270;
    }
}


// Set speed and direction when key released
if (g_keyDirectionIsReleased)
{
    if (g_keyDirection == -1)  speed = 0; // Stop if no direction pressed
    else if (g_keyDirection == 0)  
    {
        direction = 0;
    }
    else if (g_keyDirection == 90) 
    {
        direction = 90;
    }
    else if (g_keyDirection == 180) 
    {
        direction = 180;
    }
    else if (g_keyDirection == 270) 
    {
        direction = 270;
    }
}


//PLAYER SPRINT - SHIFT BUTTON

if keyboard_check(vk_shift) {
    if g_keyDirection == -1 {
        speed = 0
    }
    else speed = 4;
}
else if !keyboard_check(vk_shift) {
    if g_keyDirection != -1 {
        speed = 1;
    }
}

if speed = 0 {
    if (direction = 0) sprite_index = idleRight;
    if (direction = 90) sprite_index = idleUp;
    if (direction = 180) sprite_index = idleLeft;
    if (direction = 270) sprite_index = idleDown;
}

if speed &gt; 0 {
    if (direction = 0) sprite_index = walkRight;
    if (direction = 90) sprite_index = walkUp;
    if (direction = 180) sprite_index = walkLeft;
    if (direction = 270) sprite_index = walkDown;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finds the position to spawn in next room on collision
//Go through door and find new position to go to
playerSpawnX = other.playerSpawnX;
playerSpawnY = other.playerSpawnY;
room_goto(other.doorRoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sets room start player spawn variables

x = playerSpawnX;
y = playerSpawnY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sets Start Game Spawn Variables

playerSpawnX = xstart;
playerSpawnY = ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
